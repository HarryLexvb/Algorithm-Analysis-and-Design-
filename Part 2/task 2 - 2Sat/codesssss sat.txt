// C++ implementation to find if the given
// expression is satisfiable using the
// Kosaraju's Algorithm


#include <random>
#include <regex>
#include <iostream>

using namespace std;

const int MAX = 100000;

vector<int> adj[MAX];
vector<int> adjInv[MAX];
bool colored[MAX];
bool coloredInv[MAX];
stack<int> s;

int scc[MAX];

int counter = 1;

void addEdges(int a, int b)
{
    adj[a].push_back(b);
}

void addEdgesInverse(int a, int b)
{
    adjInv[b].push_back(a);
}

void dfs1(int u)
{
    if(colored[u])
        return;

    colored[u] = 1;

    for (int i=0;i<adj[u].size();i++)
        dfs1(adj[u][i]);

    s.push(u);
}

void dfs2(int u)
{
    if(coloredInv[u])
        return;

    coloredInv[u] = 1;

    for (int i=0;i<adjInv[u].size();i++)
        dfs2(adjInv[u][i]);

    scc[u] = counter;
}

void _2sat(int n, int m, int a[], int b[])
{
    // adding edges to the graph
    for(int i=0;i<m;i++)
    {
        // variable x is mapped to x
        // variable -x is mapped to n+x = n-(-x)

        // for a[i] or b[i], addEdges -a[i] -> b[i]
        // AND -b[i] -> a[i]
        if (a[i]>0 && b[i]>0)
        {
            addEdges(a[i]+n, b[i]);
            addEdgesInverse(a[i]+n, b[i]);
            addEdges(b[i]+n, a[i]);
            addEdgesInverse(b[i]+n, a[i]);
        }

        else if (a[i]>0 && b[i]<0)
        {
            addEdges(a[i]+n, n-b[i]);
            addEdgesInverse(a[i]+n, n-b[i]);
            addEdges(-b[i], a[i]);
            addEdgesInverse(-b[i], a[i]);
        }

        else if (a[i]<0 && b[i]>0)
        {
            addEdges(-a[i], b[i]);
            addEdgesInverse(-a[i], b[i]);
            addEdges(b[i]+n, n-a[i]);
            addEdgesInverse(b[i]+n, n-a[i]);
        }

        else
        {
            addEdges(-a[i], n-b[i]);
            addEdgesInverse(-a[i], n-b[i]);
            addEdges(-b[i], n-a[i]);
            addEdgesInverse(-b[i], n-a[i]);
        }
    }

    // STEP 1 of Kosaraju's Algorithm which
    // traverses the original graph
    for (int i=1;i<=2*n;i++)
        if (!colored[i])
            dfs1(i);

    // STEP 2 of Kosaraju's Algorithm which
    // traverses the inverse graph. After this,
    // array scc[] stores the corresponding value
    while (!s.empty())
    {
        int n = s.top();
        s.pop();

        if (!coloredInv[n])
        {
            dfs2(n);
            counter++;
        }
    }

    for (int i=1;i<=n;i++)
    {
        // for any 2 variable x and -x lie in
        // same SCC
        if(scc[i]==scc[i+n])
        {
            cout << "The given expression "
                    "is unsatisfiable." << endl;
            return;
        }
    }

    // no such variables x and -x exist which lie
    // in same SCC
    cout << "The given expression is satisfiable."
         << endl;
    return;
}

int main(){

    int n = 3, m = 2;

    int a[] = {1, -1, 1, -1};
    int b[] = {2, 2, -2, -2};

    _2sat(n, m, a, b);

    return 0;
}


/*
#include<stdio.h>
#include<stdlib.h>
#include<sys/time.h>
#include<time.h>
FILE *input_file;
FILE *output_file;
double elapsed_time=0;
int n,m,sizeC,flag=0,mflag=1,nflag=0,AND=1;
int promising(int depth,int x[])
{
    int i,j,k=0,temp1[sizeC],temp2[sizeC],OR,t1,tk=1,tval,p,q,r,zflag=0;
    int tuple[m];
    for(i=0;i<m;i++)
    {
        tuple[i]=9;
    }
//      printf("depth = %d",depth);
    if(depth==0)
    {
//              printf("depth =%d\n",depth);
        return 1;
    }
    else if(depth <= n)
    {
//              printf("depth =%d\n",depth);
        rewind(input_file);
        fscanf(input_file,"%d",&n);
        fscanf(input_file,"%d",&m);
        fscanf(input_file,"%d",&sizeC);
        for(j=0;j<m;j++)
        {
            OR=0;
            tk=1;
            for(i=0;i<sizeC;i++)
            {
                fscanf(input_file,"%d",&temp1[i]);
//                              printf("temp1[%d]= %d ",i,temp1[i]);

                if(temp1[i]>0)
                {
                    temp2[i]=1;
                }
                if(temp1[i]<0)
                {
                    temp1[i]=temp1[i]*-1;
                    temp2[i]=0;
                }
//                              printf(" temp2[%d]= %d",i,temp2[i]);
                t1=temp1[i];
                t1=t1-1;
                if(t1>=depth)
                {
                    x[t1]=-101;
                }

//                              printf(" x[%d]=%d\t",t1,x[t1]);
                if(temp2[i]==0)
                {
                    if(x[t1]==1)
                    {
                        p=0;
                        if(tuple[k]==9)
                        {
                            tuple[k]=0;
                        }
                        else
                        {
                            tuple[k]=tuple[k]|p;
                        }
                    }
                    else if(x[t1]==0)
                    {
                        p=1;
                        if(tuple[k]==9)
                        {
                            tuple[k]=1;
                        }
                        else
                        {
                            tuple[k]=tuple[k]|p;
                        }
                    }
                    else if(x[t1]==-101 && tuple[k]!=1)
                    {
                        tuple[k]=9;
                    }
                }
                else if(temp2[i]==1)
                {
                    if(x[t1]==0)
                    {
                        p=x[t1];
                        //or=or|p;
                        if(tuple[k]==9 && tk==1)
                        {
                            tuple[k]=tuple[k]|p;
                            tk=0;

                        }
                        else if(tuple[k]==1)
                        {
                            tuple[k]=1;
                        }
                        else if(tuple[k]==9 && tk ==0)
                        {
                            tuple[k]=0;
                        }
                    }
                    else if(x[t1]==1)
                    {
                        p=1;
                        if(tuple[k]==9)
                        {
                            tuple[k]=1;
                        }
                        else
                        {
                            tuple[k]=tuple[k]|p;
                        }

                    }
                    else if(x[t1]==-101 && tuple[k]!=1)
                    {
                        tuple[k]=9;
                    }

                }
//                              printf(" p=%d    or=%d\t",p,or);
//                              printf("tuple[%d]= %d \n",k,tuple[k]);
            }
//                      printf("\n");
            if(tuple[k]==0)
            {
                return 0;
            }
            else if(tuple[k]!=9)
            {
                AND = AND & tuple[k];
            }
            else if(tuple[k]==9)
            {
                //      r=1;
            }
            k++;

        }
        if(AND!=0)
        {
            for(q=0;q<sizeC;q++)
            {
                if(tuple[q]==9)
                {
//                                      printf("zflag=%d",zflag);
                    zflag=1;
                }
            }
            if(zflag!=1)// && r!=1)
            {
                flag=1;
                return 0;
            }
            return 1;

        }
        else if(AND==0)
        {
            return 0;
        }
    }
    else if(depth>n)
    {
        return 0;
    }

}
void backTrackCompute(int depth,int x[],int y[])
{
    int i,j,temp[n],t1,t2,k=n;
    //To check all clauses are satisfied with currentassignment of variables
    //Flow of logic
    if (promising(depth,x))
    {
        x[depth]=1;
        backTrackCompute(depth+1,x,y);
        x[depth]=0;
        backTrackCompute(depth +1,x,y);
    }
//      printf("flag = %d\n",flag);
    if(flag!=0)
    {
//              printf("answer\n");
        if(n<=5)
        {
            for(i=0;i<depth;i++)
            {
                fprintf(output_file,"x[%d]=%d\n",i+1,x[i]);
            }
        }
        else if(n>5 && m<=30)
        {
            for(i=0;i<depth;i++)
            {
                fprintf(output_file,"x[%d]=%d\n",i+1,x[i]);
            }
            exit(1);
        }
        else if(n>5 && m>30)
        {
            fprintf(output_file,"There is a satisfying assignment \n");
            exit(1);

        }
        flag =0;
        fprintf(output_file,"\n");
        nflag=1;
        return;
    }


}
int main(int argc,char *argv[])
{
//Taking input file from command line argument
    int i;
    clock_t start,end;
    input_file = fopen("C:/Users/win 10/Documents/CLION/pruebas/input0.txt","r");
    output_file = fopen("C:/Users/win 10/Documents/CLION/pruebas/output0.txt","w");
    if(!input_file)
    {
        fprintf(output_file,"\n Error while proccesing input file\n Please give input file.txt\n");
        return 0;
    }
    fscanf(input_file,"%d",&n);
    int x[n];
    for(i=0;i<n;i++)
    {
        x[i]=-101;
    }
    int y[n];
    fscanf(input_file,"%d",&m);
    fscanf(input_file,"%d",&sizeC);
//calling Recursive dfs function
//      printf("n= %d\tm=%d sizeC=%d\n",n,m,sizeC);
    start=clock();
    backTrackCompute(0,x,y);
    end=clock();
    if(flag == 0 && nflag==0)
    {
        fprintf(output_file,"\nNo satisfying assignment\n");
    }
    elapsed_time=((double)((end-start))/CLOCKS_PER_SEC)*1000;
    fprintf(output_file,"The Run Time is %f milli seconds\n",elapsed_time);
//Printing the run time
    fclose(input_file);
    fclose(output_file);

    return 0;

} */


/////////////////////////////////////////////////////////////
/*
#include <algorithm>
#include <cmath>
#include <cstdint>
#include <iostream>
#include <string>
#include <vector>

using namespace std;


 // enum for different types of return flags defined

enum Cat {
    satisfied,   // when a satisfying assignment has been found
    unsatisfied, // when no satisfying assignment has been found after
    // exhaustively searching
    normal,   // when no satisfying assignment has been found till now, and DPLL()
    // has exited normally
    completed // when the DPLL algorithm has completed execution
};


 // class to represent a boolean formula

class Formula {
public:
    // a vector that stores the value assigned to each variable, where
    // -1 - unassigned
    // 0 - true
    // 1 - false
    vector<int> literals;
    vector<int> literal_frequency; // vector to store the number of occurrences of
    // each literal

    // vector to store the difference in number of occurrences with
    // positive and negative polarity of each literal
    vector<int> literal_polarity;

    // vector to store the clauses
    // for each clauses, if the variable n is of positive polarity, then 2n is
    // stored if the variable n is of negative polarity, then 2n+1 is stored here,
    // n is assumed to be zero indexed
    vector<vector<int>> clauses;
    Formula() {}

    // copy constructor for copying a formula - each member is copied over
    Formula(const Formula &f) {
        literals = f.literals;
        clauses = f.clauses;
        literal_frequency = f.literal_frequency;
        literal_polarity = f.literal_polarity;
    }
};


// class to represent the structure and functions of the SAT Solver

class SATSolverDPLL {
private:
    Formula formula;               // the initial formula given as input
    int literal_count;             // the number of variables in the formula
    int clause_count;              // the number of clauses in the formula
    int unit_propagate(Formula &); // performs unit propagation
    int DPLL(Formula);             // performs DPLL recursively
    int apply_transform(Formula &,
                        int); // applies the value of the literal in every clause
    void show_result(Formula &, int); // displays the result
public:
    SATSolverDPLL() {}
    void initialize(); // intiializes the values
    void solve();      // calls the solver
};


// function that accepts the inputs from the user and initializes the attributes
 // in the solver

void SATSolverDPLL::initialize() {
    char c;   // store first character
    string s; // dummy string

    while (true) {
        cin >> c;
        if (c == 'c') // if comment
        {
            getline(cin, s); // ignore
        } else             // else, if would be a p
        {
            cin >> s; // this would be cnf
            break;
        }
    }
    cin >> literal_count;
    cin >> clause_count;

    // set the vectors to their appropriate sizes and initial values
    formula.literals.clear();
    formula.literals.resize(literal_count, -1);
    formula.clauses.clear();
    formula.clauses.resize(clause_count);
    formula.literal_frequency.clear();
    formula.literal_frequency.resize(literal_count, 0);
    formula.literal_polarity.clear();
    formula.literal_polarity.resize(literal_count, 0);

    int literal; // store the incoming literal value
    // iterate over the clauses
    for (int i = 0; i < clause_count; i++) {
        while (true) // while the ith clause gets more literals
        {
            cin >> literal;
            if (literal > 0) // if the variable has positive polarity
            {
                formula.clauses[i].push_back(2 *
                                             (literal - 1)); // store it in the form 2n
                // increment frequency and polarity of the literal
                formula.literal_frequency[literal - 1]++;
                formula.literal_polarity[literal - 1]++;
            } else if (literal < 0) // if the variable has negative polarity
            {
                formula.clauses[i].push_back(2 * ((-1) * literal - 1) +
                                             1); // store it in the form 2n+1
                // increment frequency and decrement polarity of the literal
                formula.literal_frequency[-1 - literal]++;
                formula.literal_polarity[-1 - literal]--;
            } else {
                break; // read 0, so move to next clause
            }
        }
    }
}

/*
 //function to perform unit resolution in a given formula
 // arguments: f - the formula to perform unit resolution on
 //return value: int - the status of the solver after unit resolution, a member
 //of the Cat enum Cat::satisfied - the formula has been satisfied
 //              Cat::unsatisfied - the formula can no longer be satisfied
 //               Cat::normal - normal exit

int SATSolverDPLL::unit_propagate(Formula &f) {
    bool unit_clause_found =
            false; // stores whether the current iteration found a unit clause
    if (f.clauses.size() == 0) // if the formula contains no clauses
    {
        return Cat::satisfied; // it is vacuously satisfied
    }
    do {
        unit_clause_found = false;
        // iterate over the clauses in f
        for (int i = 0; i < f.clauses.size(); i++) {
            if (f.clauses[i].size() ==
                1) // if the size of a clause is 1, it is a unit clause
            {
                unit_clause_found = true;
                f.literals[f.clauses[i][0] / 2] =
                        f.clauses[i][0] % 2; // 0 - if true, 1 - if false, set the literal
                f.literal_frequency[f.clauses[i][0] / 2] =
                        -1; // once assigned, reset the frequency to mark it closed
                int result = apply_transform(f, f.clauses[i][0] /
                                                2); // apply this change through f
                // if this caused the formula to be either satisfied or unsatisfied,
                // return the result flag
                if (result == Cat::satisfied || result == Cat::unsatisfied) {
                    return result;
                }
                break; // exit the loop to check for another unit clause from the start
            } else if (f.clauses[i].size() == 0) // if a given clause is empty
            {
                return Cat::unsatisfied; // the formula is unsatisfiable in this branch
            }
        }
    } while (unit_clause_found);

    return Cat::normal; // if reached here, the unit resolution ended normally
}


// applies a value of a literal to all clauses in a given formula
 // arguments: f - the formula to apply on
 //           literal_to_apply - the literal which has just been set
 //return value: int - the return status flag, a member of the Cat enum
 //              Cat::satisfied - the formula has been satisfied
 //              Cat::unsatisfied - the formula can no longer be satisfied
 //              Cat::normal - normal exit
 //
int SATSolverDPLL::apply_transform(Formula &f, int literal_to_apply) {
    int value_to_apply = f.literals[literal_to_apply]; // the value to apply, 0 -
    // if true, 1 - if false
    // iterate over the clauses in f
    for (int i = 0; i < f.clauses.size(); i++) {
        // iterate over the variables in the clause
        for (int j = 0; j < f.clauses[i].size(); j++) {
            // if this is true, then the literal appears with the same polarity as it
            // is being applied that is, if assigned true, it appears positive if
            // assigned false, it appears negative, in this clause hence, the clause
            // has now become true
            if ((2 * literal_to_apply + value_to_apply) == f.clauses[i][j]) {
                f.clauses.erase(f.clauses.begin() +
                                i); // remove the clause from the list
                i--;                // reset iterator
                if (f.clauses.size() ==
                    0) // if all clauses have been removed, the formula is satisfied
                {
                    return Cat::satisfied;
                }
                break; // move to the next clause
            } else if (f.clauses[i][j] / 2 ==
                       literal_to_apply) // the literal appears with opposite polarity
            {
                f.clauses[i].erase(
                        f.clauses[i].begin() +
                        j); // remove the literal from the clause, as it is false in it
                j--;    // reset the iterator
                if (f.clauses[i].size() ==
                    0) // if the clause is empty, the formula is unsatisfiable currently
                {
                    return Cat::unsatisfied;
                }
                break; // move to the next clause
            }
        }
    }
    // if reached here, the function is exiting normally
    return Cat::normal;
}

//
 // function to perform the recursive DPLL on a given formula
 //argument: f - the formula to perform DPLL on
 // return value: int - the return status flag, a member of the Cat enum
 //               Cat::normal - exited normally
 //               Cat::completed - result has been found, exit recursion all the
 // way
 //
int SATSolverDPLL::DPLL(Formula f) {
    int result = unit_propagate(f); // perform unit propagation on the formula
    if (result == Cat::satisfied) // if formula satisfied, show result and return
    {
        show_result(f, result);
        return Cat::completed;
    } else if (result == Cat::unsatisfied) // if formula not satisfied in this
        // branch, return normally
    {
        return Cat::normal;
    }
    // find the variable with maximum frequency in f, which will be the next to be
    // assigned a value already assigned variables have this field reset to -1 in
    // order to ignore them
    int i = distance(
            f.literal_frequency.begin(),
            max_element(f.literal_frequency.begin(), f.literal_frequency.end()));
    // need to apply twice, once true, the other false
    for (int j = 0; j < 2; j++) {
        Formula new_f = f; // copy the formula before recursing
        if (new_f.literal_polarity[i] >
            0) // if the number of literals with positive polarity are greater
        {
            new_f.literals[i] = j; // assign positive first
        } else                   // if not
        {
            new_f.literals[i] = (j + 1) % 2; // assign negative first
        }
        new_f.literal_frequency[i] =
                -1; // reset the frequency to -1 to ignore in the future
        int transform_result =
                apply_transform(new_f, i); // apply the change to all the clauses
        if (transform_result ==
            Cat::satisfied) // if formula satisfied, show result and return
        {
            show_result(new_f, transform_result);
            return Cat::completed;
        } else if (transform_result == Cat::unsatisfied) // if formula not satisfied
            // in this branch, return
            // normally
        {
            continue;
        }
        int dpll_result = DPLL(new_f); // recursively call DPLL on the new formula
        if (dpll_result == Cat::completed) // propagate the result, if completed
        {
            return dpll_result;
        }
    }
    // if the control reaches here, the function has returned normally
    return Cat::normal;
}


// function to display the result of the solver
 //arguments: f - the formula when it was satisfied or shown to be unsatisfiable
 //           result - the result flag, a member of the Cat enum
 //
void SATSolverDPLL::show_result(Formula &f, int result) {
    if (result == Cat::satisfied) // if the formula is satisfiable
    {
        cout << "SAT" << endl;
        for (int i = 0; i < f.literals.size(); i++) {
            if (i != 0) {
                cout << " ";
            }
            if (f.literals[i] != -1) {
                cout << pow(-1, f.literals[i]) * (i + 1);
            } else // for literals which can take either value, arbitrarily assign
                // them to be true
            {
                cout << (i + 1);
            }
        }
        cout << " 0";
    } else // if the formula is unsatisfiable
    {
        cout << "UNSAT";
    }
}


 // function to call the solver

void SATSolverDPLL::solve() {
    int result = DPLL(formula); // final result of DPLL on the original formula
    // if normal return till the end, then the formula could not be satisfied in
    // any branch, so it is unsatisfiable
    if (result == Cat::normal) {
        show_result(formula, Cat::unsatisfied); // the argument formula is a dummy
        // here, the result is UNSAT
    }
}

int main() {
    SATSolverDPLL solver; // create the solver
    solver.initialize();  // initialize
    solver.solve();       // solve
    return 0;
}*/