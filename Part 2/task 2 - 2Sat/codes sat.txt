sat 
https://github.com/sukrutrao/SAT-Solver-DPLL 
https://github.com/sukrutrao/SAT-Solver-CDCL
https://github.com/oldgalileo/satsolver   --> dpll
https://programming.vip/docs/dpll-algorithm-solve-k-sat-problem-in-detail-c.html
https://github.com/Harshagarwal19/SAT-Solver
https://github.com/142ayushkumar/SAT_Solver
https://codingnest.com/modern-sat-solvers-fast-neat-underused-part-1-of-n/
https://stackoverflow.com/questions/53359391/can-i-reduce-memory-use-in-this-c-code
https://stackoverflow.com/questions/tagged/2-satisfiability
https://iq.opengenus.org/2-sat/
https://github.com/HDANILO/resolution_method
https://github.com/schadal1/DFS_CNF_SAT_Problem
https://github.com/schadal1/DFS_CNS_SAT_Problem-Using-Recursive-Algorithm



#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <cstdio>
#include <new>
using namespace std;

template<typename T>
class Node
{
public:
    Node<T>* next;
    T element;

    Node(T* element)
    {
        this->element = *element;
        this->next = NULL;
    }
};

template<typename T>
class LinkedList
{
private:

    Node<T>* search(int index)
    {
        if (index == 0 && head != NULL)
        {
            return head;
        }
        Node<T>* aux = head;
        int c = 0;
        while (aux != NULL && c != index)
        {
            aux = aux->next;
            c++;
            if (c==index)
            {
                return aux;
            }
        }

        return NULL;
    }

public:
    Node<T>* head;
    Node<T>* tail;
    int size;

    LinkedList()
    {
        head=NULL;
        tail=NULL;
        size = 0;
    }

    void add(T* elem)
    {
        if (head==NULL)
        {
            head = new Node<T>(elem);
            tail = head;
            size++;
        }
        else if (tail == head)
        {
            Node<T>* newNode = new Node<T>(elem);
            tail = newNode;
            head->next = tail;
            size++;
        }
        else
        {
            Node<T>* newNode = new Node<T>(elem);
            tail->next = newNode;
            tail = tail->next;
            size++;
        }
    }

    void remove(int index)
    {
        if (index == 0)
        {
            if (head->next != NULL)
                head = head->next;
            else
                head = NULL;
            return;
        }

        if (index >= size) return;

        Node<T>* aux = search(index-1);
        Node<T>* next = aux->next->next;
        Node<T>* curr = aux->next;
        free(curr);
        aux->next = next;
    }

    bool add(T elem, int index)
    {
        if (index > size)
            return false;
        if (index > 0)
        {
            Node<T>* aux = search(index-1);
            Node<T>* aux2 = aux->next;
            aux->next = new Node<T>(elem);
            aux->next->next = aux2;
            size++;
        }
        else
        {
            if (head==NULL)
            {
                head = new Node<T>(elem);
                tail = head;
                size++;
            }
            else
            {
                Node<T>* newNode = new Node<T>(elem);
                newNode->next = head;
                head = newNode;
                size++;
            }
        }
    }

    T* get(int index)
    {
        Node<T>* s = search(index);
        if (s != NULL)
            return &s->element;
        else
            return NULL;
    }

};
class Catomic
{

private:

    static LinkedList<Catomic>* get_match(LinkedList<Catomic> a, LinkedList<Catomic> b, int match_a, int match_b)
    {
        LinkedList<Catomic>* lla = new LinkedList<Catomic>();
        for(int i = 0; i < a.size; i++)
        {
            for(int j = 0; j < b.size; j++)
            {
                if (contains(*lla,a.get(i)) == false && i != match_a)
                    lla->add(a.get(i));
                if (contains(*lla,b.get(j)) == false && j != match_b)
                    lla->add(b.get(j));
            }
        }
        return lla;
    }

public:
    string atom;
    bool negate;

    static bool contains(LinkedList<Catomic>a, Catomic b)
    {
        for(int i = 0; i < a.size; i++)
        {
            if (a.get(i)->compare(b) == true)
                return true;
        }
        return false;
    }

    Catomic(string atom, bool negate)
    {
        this->atom = atom;
        this->negate = negate;
    }

    Catomic(Catomic* atom)
    {
        this->atom = atom->atom;
        this->negate = atom->negate;
    }

    Catomic()
    {
        this->atom = "";
        this->negate = false;
    }

    bool compare(Catomic a)
    {
        return ((this->atom.compare(a.atom) == 0) && (this->negate == a.negate));
    }

    string toString()
    {
        string s = (negate==true? "~" : "") + this->atom;
        return s;
    }

    static LinkedList<Catomic>* atomic_from_string(string formula_clausal)
    {
        LinkedList<Catomic> * lla = new LinkedList<Catomic>();
        string* s = new string("");
        for(int i = 1; i < formula_clausal.length()-1;i++)
        {
            if (formula_clausal.at(i) != ',')
            {
                s->append(formula_clausal.substr(i,1));
            }
            else
            {
                if (s->substr(0,1).at(0) == '~')
                    lla->add(new Catomic(s->substr(1), true));
                else
                    lla->add(new Catomic(*s, false));
                s = new string("");
            }
        }
        if (s->substr(0,1).at(0) == '~')
            lla->add(new Catomic(s->substr(1), true));
        else
            lla->add(new Catomic(*s, false));

        return lla;
        //parei aqui
    }

    static LinkedList< LinkedList<Catomic> >* atomic_from_formula(string formula)
    {
        LinkedList< LinkedList<Catomic> > * llf = new LinkedList< LinkedList<Catomic> >();
        string* s = new string("");
        for(int i = 1; i < formula.size()-1; i++)
        {
            if (formula.at(i) != '}')
            {
                s->append(formula.substr(i,1));
            }
            else
            {
                if (formula.at(i) == '}')
                {
                    s->append("}");
                    i++;
                }
                llf->add(Catomic::atomic_from_string(*s));
                s = new string("");
            }
        }
        //llf->add(Catomic::atomic_from_string(*s));
        //s = new string("");
        return llf;
    }

    static bool tableaux_contains_formula(LinkedList< LinkedList<Catomic> > tableaux, LinkedList<Catomic> formula)
    {

        for(int i = 0; i < tableaux.size; i++)
        {
            bool containsb = true;
            int containscount = 0;
            LinkedList<Catomic>* formula_tableaux = tableaux.get(i);
            for(int j = 0; j < formula.size; j++)
            {
                if(contains(*formula_tableaux,*formula.get(j)) == false)
                {
                    containsb = false;
                    break;
                }
                else
                    containscount++;
            }
            if (containsb == true && containscount == formula_tableaux->size)
                return true;
            /*for(int j = 0; j < tableaux.get(i)->size; j++)
            {
                if (formula_tableaux->size != formula.size)
                {
                    contains = false;
                    break;
                }
                bool equals = formula_tableaux->get(j)->compare(formula.get(j));
                if (!equals)
                    contains = false;
            }
            if (contains == true)
            {
                return true;
            }*/
        }
        return false;
    }


    static bool iteract_tableaux(LinkedList< LinkedList<Catomic> >* tableaux)
    {
        int i = 0;
        bool alteration = false;
        while (i < tableaux->size)
        {
            int j = 0;
            while (j < tableaux->size)
            {
                LinkedList<Catomic>* formula1 = tableaux->get(i);
                LinkedList<Catomic>* formula2 = tableaux->get(j);
                LinkedList< LinkedList<Catomic> >* new_formulas = Catomic::resolve_two_atomic(*formula1, *formula2);

                if (formula1->size == 1 && formula2->size == 1)
                {
                    if (tableaux->get(i)->get(0)->atom.compare(tableaux->get(j)->get(0)->atom) && tableaux->get(i)->get(0)->negate != tableaux->get(j)->get(0)->negate)
                    {
                        LinkedList<Catomic>* at = new LinkedList<Catomic>();
                        at->add(new Catomic(*new string(""), false));
                        tableaux->add(at);
                        return false;
                    }
                }
                int z = 0;
                while (z < new_formulas->size)
                {
                    if (tableaux_contains_formula(*tableaux, *new_formulas->get(z)) == false)
                    {
                        tableaux->add(new_formulas->get(z));
                        alteration = true;
                    }
                    z++;
                }
                j++;
            }
            i++;
        }
        return alteration;
    }

    static LinkedList< LinkedList<Catomic> >* resolve_two_atomic(LinkedList<Catomic> a, LinkedList<Catomic> b)
    {
        LinkedList< LinkedList<Catomic> >* llf = new LinkedList< LinkedList<Catomic> >();
        int i = 0;
        while (i < a.size)
        {
            int j = 0;
            while (j < b.size)
            {
                if (a.get(i)->atom.compare(b.get(j)->atom) == 0 && a.get(i)->negate != b.get(j)->negate)
                {
                    LinkedList<Catomic>* new_atomic = get_match(a, b, i, j);
                    if (tableaux_contains_formula(*llf,*new_atomic) == false)
                        llf->add(get_match(a,b,i,j));

                }
                j++;
            }
            i++;
        }
        return llf;
    }
};

int main()
{

    /*LinkedList<Catomic>* ll = Catomic::atomic_from_string(*new string("{a1,~a12,b123,~b1234}"));
    for(int i = 0; i < ll->size; i++)
        printf("Atomo: %s, negate: %s\n",ll->get(i)->atom.c_str(),(ll->get(i)->negate == true ? "true" : "false"));

    system("pause");
    exit(1);*/

    char * cformula = (char*)malloc(sizeof(char)*1024);
    string formula("");
    string tableaux("");
    printf("Digite a formula na forma clausal para resolver no sistema de resolucao:\n");
    printf("Por exemplo: {{a12,b},{~a,b},{a,~b32},{~a,~b},{a},{~bade}} onde ~ representa operador not.\n");
    printf("Mesmo que seja apenas a formula {a}, ela deve ser representada da seguinte maneira: {{a}}\n");
    printf("Podera ser usado qualquer indice apos a letra, por exemplo {{a12312731283}}\n");
    printf("Nao podera ser utilizado dupla negacao, ja que esta eh redudante\n");

    scanf("%s",cformula);
    formula = cformula;
    LinkedList< LinkedList<Catomic> > *lla = Catomic::atomic_from_formula(formula);
    int size = formula.length();
    int cont = 1;
    char* s = (char*)malloc(sizeof(char)*256);
    sprintf(s, "%d", cont);
    tableaux.append(s);
    tableaux.append(". ");
    for(int i = 1; i < size-1; i++)
    {
        if (formula.at(i) != '}')
        {
            tableaux.append(formula.substr(i,1));
        }
        else
        {
            cont++;
            sprintf(s, "%d", cont);
            tableaux.append("}\n");
            tableaux.append(s);
            tableaux.append(". ");
            i++;
        }
    }

    while(Catomic::iteract_tableaux(lla))
    {
        printf("Resolvendo Tableaux pelo metodo de resolucao\n");
        //do nothing
    }
    printf("Tableaux resolvido\n");
    //começa sistema de resolucao
    for(int i = 0; i < lla->size; i++)
    {
        printf("%d. {", i+1);
        if (lla->get(i)->size > 0)
        {
            for(int j = 0; j < lla->get(i)->size; j++)
            {
                if (j != lla->get(i)->size - 1)
                    printf("%s,",lla->get(i)->get(j)->toString().c_str());
                else
                    printf("%s}\n",lla->get(i)->get(j)->toString().c_str());
            }
        }
        else
            printf("}\n");
    }

    //printf("%s\n",tableaux.c_str());

    return 0;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include <cstdio>
#include <cstdlib>

#define TRUE 1
#define FALSE 0
#define OK 1
#define ERROR 1
#define INFEASIBLE -1
#define OVERFLOW -2

typedef int Status;

#define STACK_INIT_SIZE 100
#define STACKINCREMENT 10

typedef char SElemType;

typedef int SElemType_1;

typedef struct { SElemType *base; SElemType *top; int stacksize; }SqStack;//operator stack

typedef struct { SElemType_1 *INTbase; SElemType_1 *INTtop; int INTstacksize; }INTStack;//Operator stack Status InitStack(SqStack &S);//Initialize Status GetTop(SqStack S, SElemType &e);//Read the top of the stack Status Push( SqStack & S, SElemType e);//stack Status Pop (SqStack & S, SElemType & e);//stack Status initStack (INTStack & S);//initialization Status pop (INTStack & S, SElemType_1 & e);//stack Status push(INTStack &S, SElemType_1 e);//Push into the stack char precede(SElemType e1, SElemType e2);//Determine the priority of the operand Status bothway(int &a, SElemType b, int c);//Two-way operator operation Status TruthTable(int a[65][6], int count,char ch[6]);//Truth Table Status Proposition(char a[50], char ch[6]);//Find the number of propositions

Status InitStack(SqStack &s) {//Construct an empty stack
    s.base = (SElemType*)malloc(STACK_INIT_SIZE * sizeof(SElemType));
    if (!s.base) exit(OVERFLOW);
    s.top = s. base; s.stacksize = STACK_INIT_SIZE;
    return OK;
}
Status GetTop(SqStack s, SElemType &e) {//Get the stack top element
    if (s.top == s.base) return ERROR;
    e = *(s.top-1 );//(s.top-1 );
    return OK;
}
Status Push(SqStack &s, SElemType e) { //Insert element e as the new stack top
    if (s.top-s.base >= s.stacksize) {
        s.base = static_cast<SElemType *>(realloc(s.base, (s.stacksize + STACKINCREMENT) * sizeof(SElemType))); //(SElemType)realloc(s.base, (s.stacksize + STACKINCREMENT) * sizeof(SElemType));
        if (!s.base) exit(OVERFLOW);
        s.top = s.base + s.stacksize;
        s.stacksize += STACKINCREMENT;
    }
    *s.top++ = e;
    return OK;
}
Status Pop(SqStack &s, SElemType &e) {//pop the top element of the stack
    if (s .top == s.base) return ERROR; e = *(--s.top); return OK; // --s.top
}
Status initStack(INTStack &s) { //Construct an empty stack
    s.INTbase = static_cast<SElemType_1 *>(malloc(STACK_INIT_SIZE * sizeof(SElemType_1)));
    if (!s.INTbase) exit(OVERFLOW);
    s.INTtop = s.INTbase; s.INTstacksize = STACK_INIT_SIZE; return OK;
}
Status pop(INTStack &s, SElemType_1 &e) {//pop the top element of the stack
    if (s.INTtop == s.INTbase)
        return ERROR;
    e = *(--s.INTtop); //--s.INTtop
    return OK;
}
Status push(INTStack &s, SElemType_1 e){//Insert element e as the new stack top
    if (s.INTtop-s.INTbase >= s.INTstacksize) {
        s.INTbase = static_cast<SElemType_1 *>(realloc(s.INTbase,(s.INTstacksize + STACKINCREMENT) * sizeof(SElemType_1)));
        if (!s.INTbase)
            exit(OVERFLOW);
        s.INTtop = s.INTbase + s.INTstacksize ;
        s.INTstacksize += STACKINCREMENT;
    }
    *s.INTtop++ = e;
    return OK;
}

char precede(SElemType e1, SElemType e2){//Determine the priority of the operand
    if (e1 =='v'&&e2 == 'v') return'>';
    if (e1 =='v'&&e2 =='^') return'>';
    if (e1 =='v'&&e2 =='~') return'>';
    if (e1 =='v'&&e2 =='-') return'>';
    if (e1 =='v'&&e2 ==')') return'>';
    if (e1 =='v'&&e2 =='(') return'<';
    if (e1 =='v'&&e2 =='#') return'>';

    if (e1 =='^'&&e2 =='v') return'>';
    if (e1 =='^'&&e2 =='^') return'>';
    if (e1 =='^'&&e2 =='~') return'>';
    if (e1 =='^'&&e2 =='-') return'>';
    if (e1 =='^'&&e2 ==')') return'>';
    if (e1 =='^'&&e2 =='(') return'<';
    if (e1 =='^'&&e2 =='#') return'>';

    if (e1 =='-'&&e2 =='v') return'>';
    if (e1 =='-'&&e2 =='^') return'>';
    if (e1 =='-'&&e2 =='~') return'>';
    if (e1 =='-'&&e2 =='-') return'>';
    if (e1 =='-'&&e2 ==')') return'>';
    if (e1 =='-'&&e2 =='(') return'<';
    if (e1 =='-'&&e2 =='#') return'>';

    if (e1 =='~'&&e2 =='v') return'>';
    if (e1 =='~'&&e2 =='^') return'>';
    if (e1 =='~'&&e2 =='~') return'>';
    if (e1 =='~'&&e2 =='-') return'>';
    if (e1 =='~'&&e2 ==')') return'>';
    if (e1 =='~'&&e2 =='(') return'<';
    if (e1 =='~'&&e2 =='#') return'>';

    if (e1 =='('&&e2 =='v') return'<';
    if (e1 =='('&&e2 =='^') return'<';
    if (e1 =='('&&e2 =='~') return'<';
    if (e1 =='('&&e2 =='-') return'<';

    if (e1 =='#'&&e2 =='v') return'<';
    if (e1 =='#'&&e2 =='^') return'<';
    if (e1 =='#'&&e2 =='~') return'<';
    if (e1 =='#'&&e2 =='-') return'<';
    if (e1 =='#'&&e2 =='(') return'<';

    if (e1 =='!'&&e2 =='v') return'>';
    if (e1 =='!'&&e2 =='^') return'>';
    if (e1 =='!'&&e2 =='~') return'>';
    if (e1 =='!'&&e2 =='-') return'>';
    if (e1 =='!'&&e2 ==')') return'>';
    if (e1 =='!'&&e2 =='(') return'<';
    if (e1 =='!'&&e2 =='#') return'>';

    if (e1 =='v'&&e2 =='!') return'<';
    if (e1 =='^'&&e2 =='!') return'<';
    if (e1 =='~'&&e2 =='!') return'<';
    if (e1 =='-'&&e2 =='!') return'<';
    if (e1 =='#'&&e2 =='!') return'<';

    if (e1 =='('&&e2 =='(') return'<';
    if (e1 =='('&&e2 ==')') return'=';

    return'p';
} //Use lowercase v to denote disjunction; use ^ to denote conjunction; use-to denote conditions; use ~ to denote double conditions;
Status bothway(int &a, SElemType b, int c){
    if (b == 'v') { if (a == 0 && c == 0) a = 0; else a = 1; }
    if (b == '^') { if (a == 1 && c == 1) a = 1; else a = 0; }
    if (b =='-') { if (a == 1 && c == 0) a = 0; else a = 1; }
    if (b =='~') { if (a == c) a = 1; else a = 0; }
    return OK;
}
Status TruthTable(int a[65][6 ], int count,char ch[6]){//Truth table
    int i,sum=1,s,k,j;
    for (i = 0; i <count; i++)
        sum = sum * 2;
    i = 1; s = sum;
    while (i <= count) {
        s = s/2; k = 0;
        j = 1;
        while (j <= sum) {
            if((j/s)%20)
                for (k = 0; k <s; k++) {
                    a[j-1][i-1] = 0; j++;
                }
            else for (k = 0; k <s; k++) {
                    a[j- 1][i-1] = 1; j++; }
        }
        i++;
    }
    return OK;
}
Status Proposition(char a[50], char ch[6]){//Find the number of propositions
    int i=0,j=0,k=0;
    int flag = 0;
    while (a[i]) {
        if (a[i] >= 65 && a[i] <= 90) {
            while (ch[j]) {
                if (a[i] == ch[j]) flag = 1; j++;
            } if (flag == 0) {
                ch[k] = a[i]; k++;
            } flag = 0; j = 0;
        } i++; } return OK;
}

int main() {

    int n,a[65][6],sum=1,s;
    char exqu[50], ch[6] = {0};
    printf_s("Please enter the number of propositions:");
    scanf("%d", &n);
    printf_s("Please enter the proposition expression:");
    scanf("%s", exqu);
    for (s = 0; s <n; s++) {
        sum = sum * 2;
    }//Find the number of all cases sum


    Proposition(exqu,ch);//Extract n variables and store them in the character array ch

    TruthTable(a, n, ch);//store all conditions in array a


    SqStack Operator;//Operator stack
    INTStack Operand;//Operand stack
    InitStack(Operator);//initialization
    initStack(Operand);//initialization


    SElemType e;
    int k = 0,result[65];
    int i = 0,j=0;
    SElemType_1 p, q;
    SElemType E;

    while (k <sum)
    {
        *Operator.top ='#';
        Operator.top++;
        GetTop(Operator, e);
        i = 0;
        while (exqu[i] !='#' || e !='#')
        {


            if (exqu[i] <= 90 && exqu[i] >= 65) {
                while (exqu[i] != ch[j]) {
                    j++;
                }
                push(Operand, a[k][j]);
                //print(Operand);
                //*Operand.INTtop = a[k][j];//printf_s("%d", a[k][j]);
                //Operand.INTtop++;
                j = 0;
                i++;
            }
            else {
                GetTop(Operator, e);
                switch (precede(e, exqu[i])) {
                    case'<':Push(Operator, exqu[i]); i++;
                        break;
                    case'=':Pop(Operator, e); i++;
                        break;
                    case'>':Pop(Operator, E);
                        if (E =='!')
                        {
                            pop(Operand, p);
                            if (p == 0)
                                p = 1;
                            else
                                p = 0;
                            push(Operand, p);

                            //print(Operand);
                            //printf("%d", p);
                        }
                        else
                        {
                            pop(Operand, p); pop(Operand, q); bothway(q, E, p); push(Operand, q);//print(Operand);
                        }
                        break;
                    default:printf_s("precede function return value error\n");
                }
            }
            GetTop(Operator, e);
        }

        pop(Operand, q);
        //printf("%d\n", q);
        result[k] = q;
        k++;
        Pop(Operator, e);
        //Pop(Operator, e);


    }


    for (i = 0; i <n; i++) {
        printf_s("%c ", ch[i]);
    }
    i = 0;
    while (exqu[i]!='#') {
        printf_s("%c", exqu[i]);
        i++;
    }
    printf_s("\n");
    for (k = 0; k <sum; k++) {

        for (i = 0; i <n; i++) {
            printf_s("%d ", a[k][i]);
        }
        printf_s("%d", result[k]);
        printf_s("\n");
    }

//Output the main disjunctive normal form
    printf_s("main disjunctive normal form\n");
    for (k = 0; k <sum; k++)
    {
        if (result[k] == 1)
        {
            printf_s("(");
            for (i = 0; i <n; i++)
            {
                if (a[k][i] == 1)
                    printf_s("%c^", ch[i]);
                else
                    printf_s("!%c^", ch[i]);
            }
            printf_s("\b)v");
        }
    }
    printf_s("\b/n");

//Output main conjunctive normal form
    printf_s("Main Conjunctive Paradigm\n");
    for (k = 0; k <sum; k++)
    {
        if (result[k] == 0)
        {
            printf_s("(");
            for (i = 0; i <n; i++)
            {
                if (a[k][i] == 1)
                    printf_s("%c^", ch[i]);
                else
                    printf_s("!%c^", ch[i]);
            }
            printf_s("\b)v");
        }
    }
    printf_s("\b ");
    return 0;
}
//https://programmerclick.com/article/1654576875/
//(PvQ)^(Pv!CvQ)^C#

