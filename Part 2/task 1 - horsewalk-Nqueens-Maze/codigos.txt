/////////////////////////////////////////////////////N REINAS//////////////////////////////////////////////////
/*
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;


void print(vector<vector<char>> matrix){

    for_each(matrix.begin(), matrix.end(), [](const auto & n){
        for_each(n.begin(), n.end(), [](const auto & valor){
            if(valor == 0)
                cout << "." <<  "\t";//vacios
            else
                cout << "X" <<  "\t";//reinas
        });
        cout << endl;
    });
    cout << "\n\n";
}


bool check(vector<vector<char>> matrix, int r, int i, int N){
    for(int j = 0; j < N; ++j)
        if(matrix[j][i] == 1)//Barre verticales desde la posición [j][i] -> i = estático.
            return false;

    for(int j = 0; j < N; ++j)
        if(matrix[r][j] == 1)//Barre horizontales desde la posición [r][j] -> r = estático.
            return false;

    for(int j = 0; j < N; ++j)//Barre diagonales
        for(int k = 0; k < N; ++k)
            if (((matrix[j][k]) == 1) and ((j + k == r + i) or (j - k == r - i)))
                return false;

    return true;
}

void solve(vector<vector<char>> matrix, int r, int x, int y, int N ){
    if(r == N and matrix[x][y] == 1)
        print(matrix); // llega a su fin, se imprime la solución
 
    for(int i = 0; i < N; ++i){
        if(check(matrix, r, i, N) or (x == r and y == i)){
            //La segunda condición solo se cumple cuando se verifica la posición inicial dentro del bucle.
            //r avanza en cuanto a filas disponibles, i avanza en columnas.
            matrix[r][i] = 1;
            solve(matrix, r + 1, x, y, N);            
            if (x != r and y != i)
                matrix[r][i] = 0;
        }
    }
}

void Nqueen(int n, int x, int y){

    vector<vector<char>> matrix(n, vector<char>(n)); // se crea la matriz 
    matrix[x][y] = 1; //posicion inicial 
    solve(matrix, 0, x, y, n);
}

int main(){
    //nqueens_6(4, 2, 0);
    Nqueen(5, 3, 3);
} //*/


/*
#include <iostream>
#include <vector>
#include <algorithm>
#include <chrono> 

using namespace std;


void print(vector<vector<char>> matrix){

    for_each(matrix.begin(), matrix.end(), [](const auto & n){
        for_each(n.begin(), n.end(), [](const auto & valor){
            if(valor == 0)
                cout << "." <<  "\t";//vacios
            else
                cout << "X" <<  "\t";//reinas
        });
        cout << endl;
    });
    cout << "\n\n";
}

bool check(vector<vector<char>> matrix, int r, int i, int N){
   for(int j = 0; j < N; ++j)
        if(matrix[j][i] == 1)//Barre verticales desde la posición [j][i] -> i = estático.
            return false;

    for(int j = 0; j < N; ++j)
        if(matrix[r][j] == 1)//Barre horizontales desde la posición [r][j] -> r = estático.
            return false;

    for(int j = 0; j < N; ++j)//Barre diagonales
        for(int k = 0; k < N; ++k)
            if (((matrix[j][k]) == 1) and ((j + k == r + i) or (j - k == r - i)))
                return false;

    return true; 
}

bool solve(vector<vector<char>> matrix, int r, int x, int y, int N ){
    if(r == N and matrix[x][y] == 1){
        print(matrix); // llega a su fin, se imprime la solución
        return false; 
    }
 
    for(int i = 0; i < N; ++i){
        if(check(matrix, r, i, N) or (x == r and y == i)){
            //La segunda condición solo se cumple cuando se verifica la posición inicial dentro del bucle.
            //r avanza en cuanto a filas disponibles, i avanza en columnas.
            matrix[r][i] = 1;
            bool l = solve(matrix, r + 1, x, y, N);
            //solve(matrix, r + 1, x, y, N);
            if (l == 0)
                return false;             
            if (x != r and y != i)
                matrix[r][i] = 0;
        }
    }
    return true; 
}

void Nqueen(int n, int x, int y){

    vector<vector<char>> matrix(n, vector<char>(n)); // se crea la matriz 
    matrix[x][y] = 1; //posicion inicial 

    auto start = std::chrono::system_clock::now();
    solve(matrix, 0, x, y, n);
    auto end = std::chrono::system_clock::now();
    std::chrono::duration<double> elapsed_seconds = end - start;
    std::time_t end_time = std::chrono::system_clock::to_time_t(end);
    cout << "tiempo " << elapsed_seconds.count() << endl;
}

int main(){
    //nqueens_6(4, 2, 0);
    //Nqueen(25, 0, 0);
    Nqueen(4, 2, 0);
}

// */

/*
#include<iostream>
using namespace std;
#define N 25
void printBoard(int board[N][N]) {
   for (int i = 0; i < N; ++i)
    {
        for (int j = 0; j < N; ++j)
        {
            if(board[i][j] == 0)
                cout << "." <<  " "; 
            else
                cout << "X" <<  " ";             
        }
        cout << endl; 
    }
}
bool isValid(int board[N][N], int row, int col) {
   for (int i = 0; i < col; i++) //check whether there is queen in the left or not
      if (board[row][i])
         return false;
   for (int i=row, j=col; i>=0 && j>=0; i--, j--)
      if (board[i][j]) //check whether there is queen in the left upper diagonal or not
         return false;
   for (int i=row, j=col; j>=0 && i<N; i++, j--)
      if (board[i][j]) //check whether there is queen in the left lower diagonal or not
         return false;
   return true;
}
bool solveNQueen(int board[N][N], int col) {
   if (col >= N) //when N queens are placed successfully
      return true;
   for (int i = 0; i < N; i++) { //for each row, check placing of queen is possible or not
      if (isValid(board, i, col) ) {
         board[i][col] = 1; //if validate, place the queen at place (i, col)
         if ( solveNQueen(board, col + 1)) //Go for the other columns recursively
            return true;
         board[i][col] = 0; //When no place is vacant remove that queen
      }
   }
   return false; //when no possible order is found
}
bool checkSolution() {
    int board[N][N];
    for(int i = 0; i<N; i++)
        for(int j = 0; j<N; j++)
            board[i][j] = 0; //set all elements to 0
    if ( solveNQueen(board, 0) == false ) { //starting from 0th column
      cout << "Solution does not exist";
      return false;
    }
    printBoard(board);
    return true;
}
int main() {
   checkSolution();
}*/


//////////////////////////SOLUCION 1/////////////////////////////////////////////////////////
/*
#include <iostream>
#include <cmath>

using namespace std;

int x = 0;

bool comprobar(int *reinas, int n, int k){
    int i;
    for(i = 0; i < k; ++i){
        if((reinas[i] == reinas[k]) or (abs(k-i) == abs(reinas[k]-reinas[i]))){
            return false;
        }
    }
    return true;
}

void Nreinas(int *reinas, int n, int k){
    if(k == n){
        x++;
        cout << "solucion " << x << ": ";
        for (int i = 0; i < n; ++i) // imprimir todas las posiciones del array reinas
        {
            cout << reinas[i] << ", ";
        }
        cout << endl;
    }else{ // aun queda reinas por colocar y el algoritmo debe seguir buscando
        for (reinas[k] = 0; reinas[k] < n; reinas[k]++) // expande el arbol de busqueda en anchura
        {
            if(comprobar(reinas, n, k)) // check si la reina no esta bajo amenaza
            {
                Nreinas(reinas, n, k+1);
            }
        }
    }
}

int main(){
    int k = 0; //k es el nivel del arbol o como el numero de reinas dentro del tablero }
    int cantidad; //cantidad de reinas
    cout << "numero de reinas : "; cin >> cantidad;

    int *reinas;
    reinas = new int[cantidad];
    for (int i = 0; i < cantidad; ++i) //llenar el array de reina con -1
    {
        reinas[i] = -1;
    }

    Nreinas(reinas, cantidad, k);  //soluciones que busco, cantidad de reinas, nivel del arbol en que estoy
}*/

//////////////////////////////////////////SOLUCION 2/////////////////////////////////////////////////////////////////////
/*
#include <iostream>
#include "time.h"
#include <chrono>
#include <ctime>
using namespace std;

#define n 12

struct juegoReynas
{
    int numReynas;
    int tablero[n][n];

    // Contruir tablero y reynas a 0
    juegoReynas()
    {
        this->numReynas = n;
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < n; j++)
            {
                tablero[i][j] = 0;
            }
        }

    }

    bool jugadas(int row, int col)
    {
        int i, j;
        i = j = 0;

        // Recorrer y Verificar linea | o -
        for (i = 0; i < col; i++)
            if (tablero[row][i])
                return 0;

        // Recorrer y Verificar la diagonal '\'
        i = row;
        j = col;
        while (i >= 0 && j >= 0)
        {
            if (tablero[i][j])
                return 0;

            i--;
            j--;
        }

        // Recorrer y Verificar la diagonal '/'
        i = row;
        j = col;
        while (j >= 0 && i < n)
        {
            if (tablero[i][j])
                return 0;

            i--;
            j--;
        }

        return 1;
    }

    bool resolver(int col)
    {
        // Si todas las reynas fueron encontradas -> salir
        if (col >= n)
            return 1;

        int i = 0;
        while (i < n) // Verificar que el indice este dentro del tablero
        {
            if (jugadas(i, col)) // Verificar posicion Reyna por fila i
            {
                // Entonces asignar reyna en esa posicion del tablero
                tablero[i][col] = 1;

                if (resolver(col + 1)) // Pasar a la sgte reyna a encontrar
                    return true;

                // Realizar el backtracking colocandole un 0 como vacio
                tablero[i][col] = 0;
            }
            i++;
        }

        // Si no es encontrada -> salir con 0
        return 0;
    }

    bool boolResult()
    {
        if (!resolver(0))
            return 0;
        return 1;
    }
};

int main()
{
    juegoReynas joker;
    std::chrono::time_point<std::chrono::system_clock> start, end;

    start = std::chrono::system_clock::now();
    //
    joker.boolResult();
    //
    end = std::chrono::system_clock::now();

    std::chrono::duration<double> elapsed_seconds = end - start;
    std::time_t end_time = std::chrono::system_clock::to_time_t(end);
    std::cout << "tiempo: " << elapsed_seconds.count() << "s\n";
    return 0;
}
*/

//////////////////////////////////////SOLUCION 3/////////////////////////////////////////////////////////////////
/*
#define N 20
#include <stdbool.h>
#include <stdio.h>
int ld[30] = { 0 };

int rd[30] = { 0 };

int cl[30] = { 0 };

void printSolution(int board[N][N])
{
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++)
            printf(" %d ", board[i][j]);
        printf("\n");
    }
}

bool solveNQUtil(int board[N][N], int col)
{
    if (col >= N)
        return true;

    for (int i = 0; i < N; i++) {
        if ((ld[i - col + N - 1] != 1 &&
            rd[i + col] != 1) && cl[i] != 1) {
            board[i][col] = 1;
            ld[i - col + N - 1] =
                rd[i + col] = cl[i] = 1;

            if (solveNQUtil(board, col + 1))
                return true;
            board[i][col] = 0; // BACKTRACK
            ld[i - col + N - 1] =
                rd[i + col] = cl[i] = 0;
        }
    }

    return false;
}
bool solveNQ()
{
    int board[N][N] = { { 0, 0, 0, 0 },
                        { 0, 0, 0, 0 },
                        { 0, 0, 0, 0 },
                        { 0, 0, 0, 0 } };

    if (solveNQUtil(board, 0) == false) {
        printf("Solution does not exist");
        return false;
    }

    printSolution(board);
    return true;
}

int main()
{
    solveNQ();
    return 0;
}
 */

/////////////////////////////SOLUCION 4///////////////////////////////////////////////////////////////////
/*
#include <iostream>

#define breakLine cout << "\n---------------------------------\n";
#define MAX 10

using namespace std;

int arr[MAX], no;

void nQueens(int k, int n);
bool canPlace(int k, int i);
void display(int n);

// Function to check queens placement
void nQueens(int k, int n) {

    for (int i = 1; i <= n; i++) {
        if (canPlace(k, i)) {
            arr[k] = i;
            if (k == n)
            {
                display(n);

            }

            else
                nQueens(k + 1, n);
        }
    }
}

// Helper Function to check if queen can be placed
bool canPlace(int k, int i) {
    for (int j = 1; j <= k - 1; j++) {
        if (arr[j] == i ||
            (abs(arr[j] - i) == abs(j - k)))
            return false;
    }
    return true;
}

// Function to display placed queen
void display(int n) {


        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j++) {
                if (arr[i] != j)
                    cout << "\t" <<"_";
                else
                    cout << "\t"<<"Q";
            }
            cout << endl;
        }

}

// Driver Code
int main() {
    int n = 5;
    nQueens(1, n);
    return 0;
}
 */

////////////////////////////777SOLUCION 1 HORSE /////////////////////////////////////////////////
/*

#include <iostream>
#include <cmath>

using namespace std;

int move_x[8] = {1, 1, 2, 2, -1, -1, -2, -2};
int move_y[8] = {2, -2, 1, -1, 2, -2, 1, -1};

void printSolution(int n, int **arr){
    for(int i = 0; i < n; ++i) {
        for(int j = 0; j < n; ++j) {
            cout << *(*(arr + i) + j ) << "\t";
        }
        cout<<endl;
    }
}

bool isSafe(int x, int y, int **arr, int n){
    //Verífica que no se sobrepase los limites de la matriz y que la posición a verificar no se haya tomado previamente.
    if(x < 0 or x > n - 1 or y < 0 or y > n - 1 or arr[x][y] > 0)
        return false;
    return true;
}

int getDegree(int **arr, int n, int x, int y){
    //Verifica los caminos posibles, en caso de no tener caminos posibles se retorna -1
    int res = -1;
    for(int i = 0; i < 8; ++i)
        if(isSafe(x + move_x[i], y + move_y[i], arr, n))
            res += 1;
    return res;
}

bool solve(int n, int **arr, int curr_x, int curr_y, int pos){
    int id1 = -1;
    int min_degree1 = n + 1;
    arr[curr_x][curr_y] = pos;
    if(pos == pow(n,2)){
        printSolution(n, arr); //Encuentra la solución, imprime el array
        return true;
    }
    for(int i = 0; i < 8; ++i){
        int new_x = curr_x + move_x[i];
        int new_y = curr_y + move_y[i];
        if(isSafe(new_x, new_y, arr, n)){
            int degree = getDegree(arr, n, new_x, new_y);
            if(degree <= min_degree1){
                min_degree1 = degree;
                id1 = i;
            }
        }
    }

    if(id1 == -1){
        cout << "no hay solucion " << endl;
        return false;
    }
    int nx = curr_x + move_x[id1];
    int ny = curr_y + move_y[id1];

    solve(n, arr, nx, ny, pos + 1);
    return false;
}

void horse_6(int n, int x, int y){
    int pos_x = x;
    int pos_y = y;

    int** matrix = new int*[n];

    for(int i = 0; i < n; ++i) {
        *(matrix + i) = new int[n];
        for(int j = 0; j < n; ++j) {
            *(*(matrix + i) + j ) = -1;
        }
    }
    //printSolution(n, matrix);
    int pos = 1; //Contador de las posiciones tomadas, se va reemplazando en la matriz.
    solve(n, matrix, pos_x, pos_y, pos);
}

int main(){
    horse_6(8, 0, 0);
}
*/


/////////////////////////////////////////////////////////////////////KNIGTH HORSE ///////////////////////////////////////////////////

#include <iostream>
#include <vector>
#include <algorithm>
#include <chrono>

using namespace std;

/*vector<int> move_x = {1, 1, 2, 2, -1, -1, -2, -2};
vector<int> move_y = {2, -2, 1, -1, 2, -2, 1, -1}; // */

/*vector<int> move_x ={-2, -2, -1, 1, 2, 2, 1, -1};
vector<int> move_y = {-1, 1, 2, 2, 1, -1, -2, -2}; // */

/*vector<int> move_x ={2, 1 , -1, -2, -2, -1, 1, 2};
vector<int> move_y = {1, 2, 2, 1, -1, -2, -2, -1};// */


vector<int> move_x = {1,2,2,1,-1,-2,-2,-1};
vector<int> move_y = {2,1,-1,-2,-2,-1,1,2};// */

/*vector<int> move_x ={2, 2 , -2, -2, 1, 1, -1, -1};
vector<int> move_y = {1, -1, 1, -1, 2, -2, 2, -2};// */

void print(vector<vector<int>> matrix){

    for_each(matrix.begin(), matrix.end(), [](const auto & n){
        for_each(n.begin(), n.end(), [](const auto & valor){
            cout << valor << "\t";
        });
        cout << endl;
    });
    cout << "\n\n";
}

bool isSafe(int x, int y, vector<vector<int>> matrix, int n){
    //Verífica que no se sobrepase los limites de la matriz y que la posición a verificar no se haya tomado previamente.
    if(x < 0 or x > n - 1 or y < 0 or y > n - 1 or matrix[x][y] > 0)
        return false;
    return true;
}

int getDegree(vector<vector<int>> matrix, int n, int x, int y){
    //Verifica los caminos posibles, en caso de no tener caminos posibles se retorna -1
    int res = -1;
    for(int i = 0; i < 8; ++i)
        if(isSafe(x + move_x[i], y + move_y[i], matrix, n))
            res += 1;
    return res;
}

bool solve(int n, vector<vector<int>> matrix, int curr_x, int curr_y, int pos){
    int id1 = -1;
    int min_degree1 = n + 1;
    matrix[curr_x][curr_y] = pos;
    if(pos == (n*n)){
        print(matrix); //Encuentra la solución, imprime el array
        return true;
    }
    for(int i = 0; i < 8; ++i){
        int new_x = curr_x + move_x[i];
        int new_y = curr_y + move_y[i];
        if(isSafe(new_x, new_y, matrix, n)){
            int degree = getDegree(matrix, n, new_x, new_y);
            if(degree <= min_degree1){
                min_degree1 = degree;
                id1 = i;
            }
        }
    }

    if(id1 == -1){
        cout << "no hay solucion " << endl;
        return false;
    }
    int nx = curr_x + move_x[id1];
    int ny = curr_y + move_y[id1];

    solve(n, matrix, nx, ny, pos + 1);
    return true;
}

void horse_6(int n, int x, int y){
    int pos_x = x;
    int pos_y = y;

    vector<vector<int>> matrix(n, vector<int>(n, -1)); // se crea la matriz
    //print(matrix);
    int pos = 1; //Contador de las posiciones tomadas, se va reemplazando en la matriz.
    auto start = std::chrono::system_clock::now();
    solve(n, matrix, pos_x, pos_y, pos);
    auto end = std::chrono::system_clock::now();
    std::chrono::duration<double> elapsed_seconds = end - start;
    //std::time_t end_time = std::chrono::system_clock::to_time_t(end);
    std::cout << "tiempo " << elapsed_seconds.count() << std::endl;
}

int main(){
    horse_6(50, 0, 0);
}
//*/

//////////////////////////OTRA FROMA 
#include <iostream>
#include <cmath>
#include <chrono>

using namespace std;

/*
int move_x[8] = {1, 1, 2, 2, -1, -1, -2, -2};
int move_y[8] = {2, -2, 1, -1, 2, -2, 1, -1}; // */

/*int move_x[8] ={-2, -2, -1, 1, 2, 2, 1, -1};
int move_y[8] = {-1, 1, 2, 2, 1, -1, -2, -2}; // */

/*int move_x[8] ={2, 1 , -1, -2, -2, -1, 1, 2};
int move_y[8] = {1, 2, 2, 1, -1, -2, -2, -1};// */


int move_x[8] = {1,2,2,1,-1,-2,-2,-1};
int move_y[8] = {2,1,-1,-2,-2,-1,1,2};// */

/*int move_x[8] ={2, 2 , -2, -2, 1, 1, -1, -1};
int move_y[8] = {1, -1, 1, -1, 2, -2, 2, -2};// */

void printSolution(int n, int **arr){
    for(int i = 0; i < n; ++i) {
        for(int j = 0; j < n; ++j) {
            cout << *(*(arr + i) + j ) << "\t";
        }
        cout<<endl;
    }
}

bool isSafe(int x, int y, int **arr, int n){
    //Verífica que no se sobrepase los limites de la matriz y que la posición a verificar no se haya tomado previamente.
    if(x < 0 or x > n - 1 or y < 0 or y > n - 1 or arr[x][y] > 0)
        return false;
    return true;
}

int getDegree(int **arr, int n, int x, int y){
    //Verifica los caminos posibles, en caso de no tener caminos posibles se retorna -1
    int res = -1;
    for(int i = 0; i < 8; ++i)
        if(isSafe(x + move_x[i], y + move_y[i], arr, n))
            res += 1;
    return res;
}

bool solve(int n, int **arr, int curr_x, int curr_y, int pos){
    int id1 = -1;
    int min_degree1 = n + 1;
    arr[curr_x][curr_y] = pos;
    if(pos == pow(n,2)){
        printSolution(n, arr); //Encuentra la solución, imprime el array
        return true;
    }
    for(int i = 0; i < 8; ++i){
        int new_x = curr_x + move_x[i];
        int new_y = curr_y + move_y[i];
        if(isSafe(new_x, new_y, arr, n)){
            int degree = getDegree(arr, n, new_x, new_y);
            if(degree <= min_degree1){
                min_degree1 = degree;
                id1 = i;
            }
        }
    }

    if(id1 == -1){
        cout << "no hay solucion " << endl;
        return false;
    }
    int nx = curr_x + move_x[id1];
    int ny = curr_y + move_y[id1];

    solve(n, arr, nx, ny, pos + 1);
    return false;
}

void horse_6(int n, int x, int y){
    int pos_x = x;
    int pos_y = y;

    int** matrix = new int*[n];

    for(int i = 0; i < n; ++i) {
        *(matrix + i) = new int[n];
        for(int j = 0; j < n; ++j) {
            *(*(matrix + i) + j ) = -1;
        }
    }
    //printSolution(n, matrix);
    int pos = 1; //Contador de las posiciones tomadas, se va reemplazando en la matriz.
    auto start = std::chrono::system_clock::now();
    solve(n, matrix, pos_x, pos_y, pos);
    auto end = std::chrono::system_clock::now();
    std::chrono::duration<double> elapsed_seconds = end - start;
    //std::time_t end_time = std::chrono::system_clock::to_time_t(end);
    std::cout << "tiempo " << elapsed_seconds.count() << std::endl;
}

int main(){
    horse_6(50, 0, 0);
}//*/

////////////////////////////////////////////////////////////CREO QUE ESTE MUESTRA algunas soluciones mas 

/*
#include <stdio.h>
#include <stdlib.h>
#include <sys/time.h>
#define TRUE 1
#define FALSE 0
#define N 5
// variables globales
static int MovX[8], MovY[8];
static int tablero[N][N];
static int numSoluciones, totSoluciones;

//------------------------------------------------------------------------
void dibujarTablero(void) {
    int i, j;
    printf ("---------- SOLUCION ----------\n");
    for (i = 0;i < N; i++) {
        for (j = 0; j < N; j++)
            printf ("%2d ", tablero[i][j]);
        printf("\n");
    }
}

//------------------------------------------------------------------------
void formarMov(void){
    MovX[0] = -2; MovY[0] = 1;
    MovX[1] = -1; MovY[1] = 2;
    MovX[2] = 1; MovY[2] = 2;
    MovX[3] = 2; MovY[3] = 1;
    MovX[4] = 2; MovY[4] = -1;
    MovX[5] = 1; MovY[5] = -2;
    MovX[6] = -1; MovY[6] = -2;
    MovX[7] = -2; MovY[7] = -1;
}

//------------------------------------------------------------------------
int siguienteCasilla(int x, int y, int movimiento) {
    int f, c;
    f = x + MovX[movimiento];
    c = y + MovY[movimiento];
    if ( ((f >= 0) && (f < N)) && ((c >= 0) && (c < N)) &&  (tablero[f][c] == 0) )
    return f*N+c; // Se devuelve como indice de array lineal
    return -1;
}

//------------------------------------------------------------------------
void saltoCaballoR (int x, int y, int salto) {
    int i,f,c,fc;
    for (i=0; i<8; i++) {
        fc = siguienteCasilla(x, y, i);
        if (fc >= 0) {
            f = fc / N; c = fc % N;
            tablero[f][c] = salto; // anotar
            if (salto == N*N) { // si ya ha recorrido todo el tablero
                numSoluciones++;
                if (numSoluciones == 1) dibujarTablero();
            }
            saltoCaballoR (f,c,salto+1);
            tablero[f][c] = 0; // se desanota el ultimo movimiento
        }
    }
}

//------------------------------------------------------------------------
void saltoCaballo (int x, int y) {
    int i,f,c,fc;
    struct timeval t0, tf, t;
    totSoluciones = 0;
    for (i=0; i<8; i++) {
        numSoluciones = 0;
        fc = siguienteCasilla(x, y, i);
        if (fc >= 0) {
            f = fc / N; c = fc % N;
            tablero[f][c] = 2; // anotar
            printf ("Ensayando en %d:%d\n", f, c);
            gettimeofday (&t0, NULL);
            saltoCaballoR (f,c,3);
            gettimeofday (&tf, NULL);
            //timersub (&tf, &t0, &t);
            printf ("NumSoluciones = %d Tiempo ensayo => %3ld:%3ld seg:miliseg\n",
            numSoluciones, t.tv_sec, t.tv_usec/1000);
            tablero[f][c] = 0; // se desanota el ultimo movimiento
        }
        totSoluciones += numSoluciones;
    }
}

//------------------------------------------------------------------------
int main(int argc, char *argv[]) {
    int i,j, filaInicial, colInicial;
    struct timeval t0, tf, t;

    
    filaInicial = 0;
    colInicial = 0;

    if ((filaInicial < 0) || (filaInicial >= N)) {
        printf ("Fila debe estar en el rango 0..%d\n", N);
        return 0;
    }
    if ((colInicial < 0) || (colInicial >= N)) {
        printf ("Columna debe estar en el rango 0..%d\n", N);
        return 0;
    }
    formarMov();
    for (i = 0;i < N; i++)
        for (j = 0; j < N; j++)
            tablero[i][j] = 0;
    tablero[filaInicial][colInicial] = 1;
    gettimeofday (&t0, NULL);
    printf ("%d:%d ------------------------------------\n",
    filaInicial,colInicial);
    gettimeofday (&t0, NULL);
    printf ("%d:%d ------------------------------------\n",
    filaInicial,colInicial);
    saltoCaballo(filaInicial,colInicial);
    gettimeofday (&tf, NULL);
    //timersub (&tf, &t0, &t);
    printf ("NumSoluciones = %d Tiempo total => %ld:%ld seg:miliseg\n",
    totSoluciones, t.tv_sec, t.tv_usec/1000);
    return 0;
}*/

//////////////////////////////////
/*
#include <stdio.h>
#include <stdlib.h>
#include <sys/time.h>
#define TRUE 1
#define FALSE 0
#define N 5
// variables globales
static int MovX[8], MovY[8];
static int tablero[N][N];
static int numSoluciones, totSoluciones;

//------------------------------------------------------------------------
void dibujarTablero(void) {
    int i, j;
    printf ("---------- SOLUCION ----------\n");
    for (i = 0;i < N; i++) {
        for (j = 0; j < N; j++)
            printf ("%2d ", tablero[i][j]);
        printf("\n");
    }
}

//------------------------------------------------------------------------
void formarMov(void){
    MovX[0] = -2; MovY[0] = 1;
    MovX[1] = -1; MovY[1] = 2;
    MovX[2] = 1; MovY[2] = 2;
    MovX[3] = 2; MovY[3] = 1;
    MovX[4] = 2; MovY[4] = -1;
    MovX[5] = 1; MovY[5] = -2;
    MovX[6] = -1; MovY[6] = -2;
    MovX[7] = -2; MovY[7] = -1;
}

//------------------------------------------------------------------------
int siguienteCasilla(int x, int y, int movimiento) {
    int f, c;
    f = x + MovX[movimiento];
    c = y + MovY[movimiento];
    if ( ((f >= 0) && (f < N)) && ((c >= 0) && (c < N)) &&  (tablero[f][c] == 0) )
    return f*N+c; // Se devuelve como indice de array lineal
    return -1;
}

//------------------------------------------------------------------------
void saltoCaballoR (int x, int y, int salto) {
    int i,f,c,fc;
    for (i=0; i<8; i++) {
        fc = siguienteCasilla(x, y, i);
        if (fc >= 0) {
            f = fc / N; c = fc % N;
            tablero[f][c] = salto; // anotar
            if (salto == N*N) { // si ya ha recorrido todo el tablero
                numSoluciones++;
                if (numSoluciones == 1) dibujarTablero();
            }
            saltoCaballoR (f,c,salto+1);
            tablero[f][c] = 0; // se desanota el ultimo movimiento
        }
    }
}

//------------------------------------------------------------------------
void saltoCaballo (int x, int y) {
    int i,f,c,fc;
    struct timeval t0, tf, t;
    totSoluciones = 0;
    for (i=0; i<8; i++) {
        numSoluciones = 0;
        fc = siguienteCasilla(x, y, i);
        if (fc >= 0) {
            f = fc / N; c = fc % N;
            tablero[f][c] = 2; // anotar
            printf ("Ensayando en %d:%d\n", f, c);
            gettimeofday (&t0, NULL);
            saltoCaballoR (f,c,3);
            gettimeofday (&tf, NULL);
            //timersub (&tf, &t0, &t);
            printf ("NumSoluciones = %d Tiempo ensayo => %3ld:%3ld seg:miliseg\n",
            numSoluciones, t.tv_sec, t.tv_usec/1000);
            tablero[f][c] = 0; // se desanota el ultimo movimiento
        }
        totSoluciones += numSoluciones;
    }
}

//------------------------------------------------------------------------
int main(int argc, char *argv[]) {
    int i,j, filaInicial, colInicial;
    struct timeval t0, tf, t;

    
    filaInicial = 0;
    colInicial = 0;

    if ((filaInicial < 0) || (filaInicial >= N)) {
        printf ("Fila debe estar en el rango 0..%d\n", N);
        return 0;
    }
    if ((colInicial < 0) || (colInicial >= N)) {
        printf ("Columna debe estar en el rango 0..%d\n", N);
        return 0;
    }
    formarMov();
    for (i = 0;i < N; i++)
        for (j = 0; j < N; j++)
            tablero[i][j] = 0;
    tablero[filaInicial][colInicial] = 1;
    gettimeofday (&t0, NULL);
    printf ("%d:%d ------------------------------------\n",
    filaInicial,colInicial);
    gettimeofday (&t0, NULL);
    printf ("%d:%d ------------------------------------\n",
    filaInicial,colInicial);
    saltoCaballo(filaInicial,colInicial);
    gettimeofday (&tf, NULL);
    //timersub (&tf, &t0, &t);
    printf ("NumSoluciones = %d Tiempo total => %ld:%ld seg:miliseg\n",
    totSoluciones, t.tv_sec, t.tv_usec/1000);
    return 0;
}*/

