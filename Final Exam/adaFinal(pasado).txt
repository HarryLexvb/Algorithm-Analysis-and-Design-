#include <iostream>
#include <list>
using namespace std;

class Graph{
  public:
    int V;
    list<int> *adj;
    Graph(int V){
      this->V=V;
      adj=new list<int>[V];
    };

    void addEdge(int v, int w){
      adj[v].push_back(w);
      adj[v].push_back(v);
    }


    void printVertexCover(){
      bool visited[V];
      for(int i=0; i<V; i++)
        visited[i]=false;
      list<int>::iterator i;

      for(int x=0; x<V; x++){
        if(visited[x]==false){
          for(i=adj[x].begin();i!=adj[x].end(); i++){
            int v=*i;
            if(visited[v]==false){
              visited[v]=true;
              visited[x]=true;
              break;
            }
          }
        }
      }
      for(int i=0; i<V; i++){
        if (visited[i]){
          cout << i << " ";
        }
      }
    }
};




int main() {
  
  Graph g(7);
  g.addEdge(0, 1);
  g.addEdge(0, 2);
  g.addEdge(1, 3);
  g.addEdge(3, 4);
  g.addEdge(4, 5);
  g.addEdge(5, 6);
  
  g.printVertexCover();
} 